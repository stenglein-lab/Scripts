#!/usr/bin/perl

# this script filters sam alignment records based
# on score cutoffs
# (analogous to filtering a blast results file 
#  by e-value)
#
# Mark Stenglein July 27, 2012
#

use strict;
use Getopt::Long;

my $usage = <<USAGE;

This script filters sam alignment records based on score cutoffs
(This is analogous to filtering a blast results file by e-value)

Mark Stenglein July 27, 2012

 usage: $0  [h] [-b bottom_cutoff] [-t top_cutoff] <sam_file>

   -h                print this message

   -b bottom_cutoff  only output SAM records whose alignment score (AS field)
                     exceeds this cutoff

   -t top_cutoff     only output SAM records whose alignment score (AS field)
                     is below this cutoff

   -u                output unmapped queries (that have no alignment).
                     default is to supress them

USAGE

my $lower_cutoff = undef;
my $upper_cutoff = undef;
my $print_usage = 0;
my $output_unmapped = 0;

if (scalar @ARGV == 0) { print $usage; exit; }

GetOptions ("h" => \$print_usage, 
            "b=s" => \$lower_cutoff, 
            "t=s" => \$upper_cutoff,
            "u" => \$output_unmapped);

if ($print_usage) { print $usage; exit; }

my $sam_file = shift or print $usage and die($!);
open (my $sam_fh, "<", $sam_file) or print $usage and die("error: couldn't open sam file $sam_file\n$!\n");

my $flag = 0;
my @fields = ();
my @tags = ();

while (<$sam_fh>)
{
   chomp;

   if (/^@/)
   {
      # header lines - just output them
      print "$_\n";
      next;
   }
   
   # split line into tab-delimited components
   @fields = split "\t";

   # is this an unmapped query?
   if (!$output_unmapped)
   {
      my $flag = $fields[1];
      # don't output unmapped queries
      # see SAM format spec.
      if ($flag & 4) { next; }
   }

   my $num_fields = scalar (@fields);
   @tags = @fields[11 .. ($num_fields-1)];
   foreach (@tags)
   {
      if (/AS:i:([0-9]+)/)
      {
         my $alignment_score = $1;
         if (($lower_cutoff && ($alignment_score <= $lower_cutoff)) || ($upper_cutoff && ($alignment_score >= $upper_cutoff)))
         {
            # this one outside of range
            next;
         }
      }
   }
   print "$_\n";
}
