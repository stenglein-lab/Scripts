#!/usr/bin/perl

use strict;
use Getopt::Std;

my $usage = "fastq_trim_bases [-5 5_prime_bases_to_trim] [-3 3_prime_bases_to_trim]\n\ttrims specified number of bases from the 5' or 3' end of fastq sequenes.\n\treads from stdin and outputs trimmed records to stdout\n";

if (scalar @ARGV == 0)
{
   print $usage and exit;
}

my %args;
my $five_p_bases_to_trim = 0;
my $three_p_bases_to_trim = 0;

getopt('5:3:', \%args);

if ($args{5})
{
   $five_p_bases_to_trim = $args{5};
}
if ($args{3})
{
   $three_p_bases_to_trim = $args{3};
}

sub trim
{
   my $seq = shift @_;
   if ($three_p_bases_to_trim > 0)
   {
      $seq = substr $seq, $five_p_bases_to_trim, -$three_p_bases_to_trim;
   }
   else
   {
      $seq = substr $seq, $five_p_bases_to_trim;
   }
   return $seq;
}

my $line_counter = 0;

while (<>)
{
   chomp;
   $line_counter += 1;
   if ($line_counter == 1)
   {
      if (!/^@/)
      {
         die "error - was expecting 4-line fastq input.\nline = $_\n";
      }
      print "$_\n";
   }
   elsif ($line_counter == 2)
   {
     my $trimmed_line = trim $_;
     print "$trimmed_line\n";
   }
   elsif ($line_counter == 3)
   {
      print "$_\n";
   }
   elsif ($line_counter == 4)
   {
     my $trimmed_line = trim $_;
     print "$trimmed_line\n";
     $line_counter = 0;
   }
}


