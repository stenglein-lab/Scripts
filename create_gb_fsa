#!/usr/bin/perl

use strict;
use Getopt::Long;

my $usage = <<USAGE;

 This script is designed to help create FASTA files in the right format for Genbank submission.

 It creates a fasta "defline" in the appropriate format using information in a tab-delimited
 sequence modifier table.

 It expects a FASTA file to already exist with sequence names matching those in the first column of the 
 sequence modifier table.

 It expects the sequence modifier table to be tab-delimited and for the first row to contain column
 headers that are legitimate Genbank sequence modifiers.

 For info about sequence modifier tables, see:
      http://www.ncbi.nlm.nih.gov/WebSub/html/help/genbank-source-table.html

 For info about FASTA deflines, see: 
      http://www.ncbi.nlm.nih.gov/genbank/tbl2asn2/#fsa

 For info about the genbank batch submission process using the tbl2asn utility, see:
      http://www.ncbi.nlm.nih.gov/genbank/tbl2asn2/#


  Usage: $0 [-h] <sequence_modifier_table_file> <fasta_file) 

         -h   print this help message

         Reads fasta file from stdin and writes modified fasta to stdout
 

  Mark Stenglein 4/21/2016

USAGE

my $print_usage = 0;

# if running w/out args
if (-t STDIN && @ARGV == 0) { print ($usage) and exit; }

GetOptions("h" => \$print_usage);

if ($print_usage) {print $usage and exit;}


my $sequence_modifier_table_file = shift or print $usage and print "error: missing sequence modifier table\n" and exit;

# parse sequence modifier table file
open (my $smt_fh, "<", $sequence_modifier_table_file) or die;

my %matrix = undef;

my $header_line = 1;
my @headers = ();

while (<$smt_fh>)
{
   chomp;

   if (/^#/) { next; } # ignore comment lines

   my @data = split "\t";

   # assume first line has column headers, which ought to be legit genbank sequence modifier 
   # see: http://www.ncbi.nlm.nih.gov/WebSub/html/help/genbank-source-table.html
   if ($header_line)
   {
      @headers = @data;
      $header_line = 0;
   }
   else
   {
      #  example columns:
      #  Sequence_ID   Collected_by   Collection_date   Country   Host   Tissue_type   Mol_type   isolation_source
      my $seq_id = shift @data; 
		if ($seq_id =~ /(\S+)\s/)
		{
			# only match up to 1st whitespace in SMT sequence ID
			# do this for bunyavirus submission 4.5.2018
		   $seq_id = $1;
		}
		else
		{
		   warn "warning: couldn't match up to first whitespace character in SMT sequence id: $seq_id\n";
		}
      my $column_counter = 1;
      foreach my $datum (@data)
      {
         # store table data indexed by seq_id and column header
         $matrix{$seq_id}{$headers[$column_counter]} = $datum;
         $column_counter += 1;
      }
   }
}
close ($smt_fh);

# parse fasta file and append header lines (deflines) with info from source modifier table 
while (<>)
{
   chomp;

   # header line
   my $seq_id = undef;
   if (/^>(\S+)/)
   {
      $seq_id = $1;
		if ($seq_id =~ /(\S+)_/)
		{
			# match up to first _ character in fasta header
			# doing this for bunyavirus segment submission - 4.5.2018
		   $seq_id = $1;
		}
		else
		{
		   warn "warning: couldn't match up to first _ character in fasta header\n$seq_id\n";
		}

      # print out appended header
      print ">$seq_id";
      foreach my $header (@headers[1..$#headers])
      {
         print " [$header=";
         print "$matrix{$seq_id}{$header}]";
      }
      print "\n";
   }
   else
   {
      # just print out fasta sequence data
      print "$_\n";
   }

   
}


