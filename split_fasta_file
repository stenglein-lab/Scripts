#!/usr/bin/perl

# split sequences from a fasta/q file into those
# whose headers are listed in another file and those 
# whose headers aren't
#
# Mark Stenglein, May 27, 2011
#

use strict;
use Getopt::Long;

my $print_usage = 0;
my $header_regexp = undef;

my $usage = <<USAGE;

  This scrript splits sequences from a fasta/q file into those
  whose headers are listed in another file (to stderr)
  and those whose headers aren't listed (to stdout)

  Can specify a regular expression that allows you to use
  part of the header line as the string to compare.  

  Mark Stenglein, May 27, 2011

  usage: split_fasta_file [-h] [-r regexp] <header_list_file> <fasta/q_file>

  -h         print this message

  -r regexp  specify a regular expression (see above).
             should be quoted and have parentheses around
             the portion of the header line you want to use.

             for example: -r '(\\S)+\\s+' 
             -> This will use everything in header line 
             before first whitespace 

             default: use whole header line

USAGE

if (scalar @ARGV == 0) {print $usage and exit;}

GetOptions("h" => \$print_usage,
           "r=s" => \$header_regexp);

if ($print_usage) {print $usage and exit;}

my $to_remove_filename = shift or die ($usage);
my $fasta_filename = shift or die ($usage);

open (my $to_remove_fh, "<", $to_remove_filename) or die ($usage);

my %to_remove = ();

while (<$to_remove_fh>)
{
   chomp;
   my $header = $_;
   if ($header_regexp)
   {
      # optional regexp to only consider a part of header line
      if ($header =~ /$header_regexp/)
      {
         $header = $1;
      }
   }
   $to_remove{$header} += 1;
}

open (my $fh, "<", $fasta_filename) or die ($usage);
my $listed_header = 0;
my $first_line = 1;
my $fastq_file = 0;
my $line_count = 0;
my $header = undef;

while (<$fh>)
{
   chomp;
   $line_count += 1;

   # determine if fasta or fastq
   if ($first_line)
   {
      $first_line = 0;
      if (/^@/)
      {
         $fastq_file = 1;
      }
      elsif (!/^>/)
      {
         warn "\nerror - was expecting fasta or fastq input. First line = $_\n\n";
         print $usage and exit;
      }
   }

   if ($line_count == 1)
   {
      # parse header and determine whether to output record or not
      if (!$fastq_file and (!/^>/))
      {
         warn "\nerror - was expecting 2-line fasta input. Line = $_\n\n";
         print $usage and exit;
      }
      elsif ($fastq_file and (!/^@/))
      {
         warn "\nerror - was expecting 4-line fastq input. Line = $_\n\n";
         print $usage and exit;
      }

      if (/^[>@](.*)/)
      {
         $header = $1;
         if ($header_regexp)
         {
            # optional regexp to only consider a part of header line
            if ($header =~ /$header_regexp/)
            {
               $header = $1;
            }
         }
         if ($to_remove{$header})
         {
            # this header is listed in the headers file.  This record will be output to stderr
            $listed_header = 1;
         }
         else
         {
            # this header is not listed in the headers file.  This record will be output to stdout
            $listed_header = 0;
         }
      }

   }
   elsif ($line_count == 2 and !$fastq_file)
   {
      $line_count = 0;
   }
   elsif ($line_count == 4 and $fastq_file)
   {
      $line_count = 0;
   }

   # now, output to stdout or stderr based on whether the header is listed in the headers file
   if ($listed_header)
   {
      # stderr
      warn "$_\n";
   }
   else 
   {
      # stdout
      print "$_\n";
   }
}

close ($fh);
